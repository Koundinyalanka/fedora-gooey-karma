#!/usr/bin/python2 -tt
# -*- coding:  utf-8 -*-

#    Fedora Gooey Karma prototype
#    based on the https://github.com/mkrizek/fedora-gooey-karma
#
#    Copyright (C) 2013 
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Author: Branislav Blaskovic <branislav@blaskovic.sk>
#    Author: Tomas Meszaros <exo@tty.sk>

import os
import sys

sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), '../share/fedora-gooey-karma'))

import webbrowser
import yum
import Queue
import rpm
from fedora.client import AuthError
from fedora.client import ServerError
from fedora.client.bodhi import BodhiClient
from yum.misc import getCacheDir
from PySide import QtCore
from PySide import QtGui

from customgui import CustomTreeWidgetItem
from mainwindow_gui import Ui_MainWindow
from packagesworker import PackagesWorker 
from bodhiworker import BodhiWorker


class MainWindow(QtGui.QMainWindow):

    __BUGZILLA_REDHAT_URL = "http://bugzilla.redhat.com/show_bug.cgi?id="
    __FEDORAPEOPLE_TESTCASE_URL = "https://fedoraproject.org/wiki/QA:Testcase_"
    __FEDORA_RELEASES = [ 'Fedora 19', 'Fedora 18', 'Fedora 17' ]
    __BODHI_WORKERS_COUNT = 15

    def __init__(self, parent=None):
        # GUI
        super(MainWindow, self).__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        qr = self.frameGeometry()
        cp = QtGui.QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

        # Prepare Queues
        self.bodhi_workers_queue = Queue.Queue()
        self.pkg_worker_queue = Queue.Queue()

        # Prepare ui
        self.rpmTS = rpm.TransactionSet()
        self.__load_and_set_fedora_releases()
        self.ui.tabWidget.setCurrentIndex(0)
        self.ui.karmaUsernameEdit.setVisible(False)

        # YumBase and cache
        self.yb = yum.YumBase()
        cachedir = getCacheDir()
        self.yb.repos.setCacheDir(cachedir)

        # Holders of data
        self.__installed_packages = {}
        self.__installed_updates = {}
        self.__available_updates = {}

        # Connects
        self.ui.actionQuit.triggered.connect(QtCore.QCoreApplication.instance().quit)
        self.ui.actionAbout.triggered.connect(self.__show_message_box_about)

        self.ui.pkgList.currentItemChanged.connect(self.__show_package_detail)
        self.ui.searchEdit.textChanged.connect(self.__populate_pkgList)
        self.ui.installedBtn.clicked.connect(self.__show_installed)
        self.ui.availableBtn.clicked.connect(self.__show_available)
        self.ui.loadPackagesBtn.clicked.connect(self.__start_pkg_worker)
        self.ui.treeWidget_bugs.itemDoubleClicked.connect(self.__show_bug_in_browser)
        self.ui.treeWidget_test_cases.itemDoubleClicked.connect(self.__show_testcase_in_browser)
        self.ui.karmaCheckBox.stateChanged.connect(self.__populate_pkgList)
        self.ui.karmaUsernameEdit.textChanged.connect(self.__populate_pkgList)
        self.ui.sendBtn.clicked.connect(self.__send_comment)

        # Prepare threads
        self.bodhi_workers = []
        for i in range(self.__BODHI_WORKERS_COUNT):
            b = BodhiWorker("bodhi_worker" + str(i), self.bodhi_workers_queue)
            b.bodhi_query_done.connect(self.__bodhi_process_result)
            b.start()
            self.bodhi_workers.append(b)

        self.pkg_worker = PackagesWorker(self.pkg_worker_queue, self.bodhi_workers_queue, self.__BODHI_WORKERS_COUNT)
        self.pkg_worker.set_installed_packages.connect(self.__set_installed_packages)
        self.pkg_worker.start()

        # Pkg worker threads
        self.pkg_worker.load_installed_packages_done.connect(self.__save_installed_pkg_list)
        self.pkg_worker.load_installed_packages_start.connect(self.__installed_pkg_list_loading_info)
    
    def __show_message_box_about(self):
        text = (
            "<b>Fedora Gooey Karma</b> is a tool for browsing installed packages from updates-testing repository.<br><br>"
            "You can easily add karma comment, open bugs attached to new build and more.<br><br>"
            "<b>Authors:</b><br>"
            "<ul><li>Branislav Blaskovic</li><li>Tomas Meszaros</li></ul>"
        )
        QtGui.QMessageBox.about(QtGui.QApplication.activeWindow(), "Fedora Gooey Karma", text)

    def __add_status_item(self, item):
        self.ui.statusList.insertItem(0, str(item))

    def __bodhi_process_result(self, result):
        variant, data = result

        # We've got one bodhi update of installed package, add it to pkg list
        if variant == 'installed':
            self.__installed_updates[data['itemlist_name']] = data
            self.__add_status_item(data['itemlist_name'] + " is installed")

            if self.ui.installedBtn.isChecked():
                # Is this package in list?
                # If yes, remove it to add it again
                for i in range(self.ui.pkgList.count()):
                    item = self.ui.pkgList.item(i)
                    if item.text() == data['itemlist_name']:
                        self.ui.pkgList.takeItem(i)
                        self.ui.pkgList.removeItemWidget(item)
                        break

                # Add update to list
                self.ui.pkgList.addItem(data['itemlist_name'])

        # We've got available package update, save it
        elif variant == 'available':
            self.__available_updates[data['itemlist_name']] = data
            self.__add_status_item(data['itemlist_name'] + " can be updated")

            if self.ui.availableBtn.isChecked():
                # Is this package in list?
                # If yes, remove it to add it again
                for i in range(self.ui.pkgList.count()):
                    item = self.ui.pkgList.item(i)
                    if item.text() == data['itemlist_name']:
                        self.ui.pkgList.takeItem(i)
                        self.ui.pkgList.removeItemWidget(item)
                        break

                # Add update to list
                self.ui.pkgList.addItem(data['itemlist_name'])

    def __set_installed_packages(self, packages):
        self.__add_status_item(str(len(packages)) + " installed packages on system")
        for pkg in packages:
            self.__installed_packages[pkg.nvr] = pkg
        #self.__installed_packages = packages

    def __load_and_set_fedora_releases(self):
        # Load fedora-release version
        packages = self.rpmTS.dbMatch('name', 'fedora-release')
        for package in packages:
            break

        # Fill in current release as first
        self.ui.releaseComboBox.addItem('Fedora ' + str(package['version']))

        # Fill combo box
        for release in self.__FEDORA_RELEASES:
            # Skip current release 
            if package['version'] == release.split()[-1]:
                continue

            self.ui.releaseComboBox.addItem(release)

    def __start_pkg_worker(self):
        # Get release and put it to queue
        # Package worker will get info about it
        releasever = self.ui.releaseComboBox.currentText().split()[-1]
        self.pkg_worker_queue.put([releasever, self.ui.maxDays.value()])

    def __available_pkg_list_loading_info(self):
        release = self.ui.releaseComboBox.currentText()
        message = "Please wait... Loading all available packages. [%s]" % release
        self.ui.statusBar.showMessage(message)

    def __installed_pkg_list_loading_info(self):
        release = self.ui.releaseComboBox.currentText()
        message = "Please wait... Loading all installed packages. [%s]" % release
        self.ui.statusBar.showMessage(message)

    def __show_bug_in_browser(self):
        bug_id = self.ui.treeWidget_bugs.currentItem().text(0)
        webbrowser.open_new_tab("%s%s" % (self.__BUGZILLA_REDHAT_URL, bug_id))

    def __show_testcase_in_browser(self):
        testcase_name = self.ui.treeWidget_test_cases.currentItem().text(0).replace(' ', '_')
        webbrowser.open_new_tab("%s%s" % (self.__FEDORAPEOPLE_TESTCASE_URL, testcase_name))

    def __save_installed_pkg_list(self, pkg_object):
        message = "All installed packages has been loaded. [Fedora %s]" % pkg_object
        self.ui.statusBar.showMessage(message)
        self.ui.searchEdit.setEnabled(True)

    def __decode_dict(self, dictionary, decoding='utf-8', data_type=str):
        for key in dictionary:
            if isinstance(dictionary[key], data_type):
                dictionary[key] = dictionary[key].decode(decoding)

    def __send_comment(self):
        comment = self.ui.commentEdit.toPlainText()
        karma = self.ui.karmaBox.currentText()

        if self.__selected_pkglist_item is None:
            message = "Comment not submitted: Could not get update from testing builds"
            self.ui.statusList.insertItem(0, message)
            return
        if not self.ui.usernameEdit.text():
            message = "Please enter FAS username."
            self.ui.statusList.insertItem(0, message)
            return
        if not self.ui.passwordEdit.text():
            message = "Please enter FAS password."
            self.ui.statusList.insertItem(0, message)
            return

        bc = BodhiClient()
        bc.username = self.ui.usernameEdit.text()
        bc.password = self.ui.passwordEdit.text()

        message = "Processing... Wait please..."
        self.ui.statusList.insertItem(0, message)

        for retry in range(3):
            try:
                # Send comment to bodhi
                bc.comment(self.__selected_pkglist_item["title"], comment, karma=karma)
                message = "Comment submitted successfully."
                message2 = ("Reloading bodhi update for " 
                           + str(self.__selected_pkglist_item['itemlist_name']) + "...")
                self.ui.statusList.insertItem(0, message)
                self.ui.statusList.insertItem(0, message2)

                # Reload bodhi update
                self.bodhi_workers_queue.put(self.__selected_pkglist_item['yum_package'])
                return
            except AuthError:
                message = "Invalid username or password. Please try again."
                self.ui.statusList.insertItem(0, message)
                break
            except ServerError, e:
                message = "Server error %s" % str(e)
                self.ui.statusList.insertItem(0, message)

    def __populate_pkgList(self):
        username = self.ui.karmaUsernameEdit.text()
        not_submitted_karma = self.ui.karmaCheckBox.isChecked()
        self.ui.pkgList.clear()

        # Prepare data which we want to show
        if self.ui.installedBtn.isChecked():
            pkgList = self.__installed_updates
        elif self.ui.availableBtn.isChecked():
            pkgList = self.__available_updates


        # Loop packages
        for key in pkgList.keys():
            update = pkgList[key]

            # Filter package list by search text
            if len(self.ui.searchEdit.text()) > 0:
                if self.ui.searchEdit.text() not in update['itemlist_name']:
                    continue

            add_it = True
            # If we want to filter out updates which has karma from user
            if not_submitted_karma:
                for comment in update['formatted_comments']:
                    if comment['author'] == username:
                        add_it = False

            # Add to list
            if add_it:
                self.ui.pkgList.addItem(update['itemlist_name'])

    def __show_installed(self):
        self.ui.availableBtn.setChecked(False)
        self.ui.installedBtn.setChecked(True)
        self.__populate_pkgList()

    def __show_available(self):
        self.ui.installedBtn.setChecked(False)
        self.ui.availableBtn.setChecked(True)
        self.__populate_pkgList()

    def __show_package_detail(self, pkg_item):
        """Shows package detail in the MainWindow.

        Updates all info in every widget when user click on the item in the pkgList.

        Args:
            pkg_item: A currently selected pkgList item widget.

        Returns:
            Returns when pkg_item is None.
        """
        if pkg_item is None:
            return


        # Switch tabs to info tab
        self.ui.tabWidget.setCurrentIndex(0)

        text_browser_string = ""
        if self.ui.installedBtn.isChecked():
            pkgList = self.__installed_updates
        elif self.ui.availableBtn.isChecked():
            pkgList = self.__available_updates
        else:
            return

        bodhi_update = pkgList[pkg_item.text()]

        if bodhi_update is None:
            return

        self.__selected_pkglist_item = bodhi_update

        ## title
        self.ui.pkgNameLabel.setText(bodhi_update['itemlist_name'])

        ## yum info
        yum_values = {}
        yum_format_string = (
            "\n        Yum Info %(installed_version)s\n"
            "        ========\n\n"
            "           Name: %(name)s\n"
            "           Arch: %(arch)s\n"
            "        Version: %(version)s\n"
            "        Release: %(release)s\n"
            "           Size: %(size)s\n"
            "           Repo: %(repo)s\n"
            "      From repo: %(from_repo)s\n"
            "        Summary: %(summary)s\n"
            "            URL: %(url)s\n"
            "        License: %(license)s\n\n"
            "    Description:\n"
            "    ------------\n\n"
            "%(description)s\n\n"
        )

        # Grab yum info from installed package
        if bodhi_update.variant == 'installed':
            yum_pkg = bodhi_update.yum_package
        elif bodhi_update.variant == 'available':
            # Search for package
            for key in self.__installed_packages.keys():
                if self.__installed_packages[key].name == bodhi_update.yum_package.name:
                    yum_pkg = self.__installed_packages[key]
                    break
        else:
            yum_pkg = None

        if yum_pkg is not None:
            # if we got yum package
            # fetch info from yum_pkg
            yum_values['name'] = yum_pkg.name
            yum_values['arch'] = yum_pkg.arch
            yum_values['version'] = yum_pkg.version
            yum_values['release'] = yum_pkg.release
            yum_values['size'] = yum_pkg.packagesize
            yum_values['repo'] = yum_pkg.repo
            yum_values['from_repo'] = yum_pkg.ui_from_repo
            yum_values['summary'] = yum_pkg.summary
            yum_values['url'] = yum_pkg.url
            yum_values['license'] = yum_pkg.license
            yum_values['description'] = yum_pkg.description
            yum_values['installed_version'] = ''
            if bodhi_update.variant == 'available':
                yum_values['installed_version'] = '(installed version)'
            # decode all strings found in yum_values to utf-8
            self.__decode_dict(yum_values)
            # map fetched yum info on the yum_format_string
            # add to the final browser string
            text_browser_string += yum_format_string % yum_values

            ## related packages
            self.ui.treeWidget_related_packages.clear()
            
            ### Others pkgs category
            item_others = QtGui.QTreeWidgetItem()
            item_others.setText(0, "Other packages")
            self.ui.treeWidget_related_packages.insertTopLevelItem(0, item_others)

            for key in bodhi_update['relevant_packages']['others'].keys():
                rel_pkg = bodhi_update['relevant_packages']['others'][key]
                pkg = QtGui.QTreeWidgetItem()
                pkg.setText(0, str(rel_pkg.name))
                item_others.insertChild(0, pkg)

            ### Desktop pkgs category
            item_desktop = QtGui.QTreeWidgetItem()
            item_desktop.setText(0, "Desktop packages")
            self.ui.treeWidget_related_packages.insertTopLevelItem(0, item_desktop)

            for key in bodhi_update['relevant_packages']['desktop'].keys():
                rel_pkg = bodhi_update['relevant_packages']['desktop'][key]
                pkg = QtGui.QTreeWidgetItem()
                pkg.setText(0, str(rel_pkg.name))
                item_desktop.insertChild(0, pkg)


        else:
            print "Not in installed packages"

        ## bodhi info
        bodhi_values = {}
        bodhi_format_string = (
            "\n      Bodhi Info\n"
            "      ==========\n\n"
            "         Status: %(status)s\n"
            "        Release: %(release)s\n"
            "      Update ID: %(updateid)s\n"
            "         Builds: %(builds)s"
            "      Requested: %(request)s\n"
            "         Pushed: %(pushed)s\n"
            " Date Submitted: %(date_submitted)s\n"
            "  Date Released: %(date_released)s\n"
            "      Submitted: %(submitter)s\n"
            "          Karma: %(karma)s\n"
            "   Stable Karma: %(stable_karma)s\n"
            " Unstable Karma: %(unstable_karma)s\n\n"
            "            URL: %(bodhi_url)s\n\n"
            "        Details:\n"
            "        --------\n\n"
            "%(notes)s\n"
        )

        bodhi_values['status'] = bodhi_update['status']
        bodhi_values['release'] = bodhi_update['release']['long_name']
        bodhi_values['updateid'] = bodhi_update['updateid']
        builds_list = bodhi_update['builds']
        if len(builds_list):
            build_num = 0
            builds_string = ""
            for build_item in builds_list:
                if not build_num:
                    # first build name
                    builds_string += "%s\n" % build_item['nvr']
                else:
                    # second and next builds
                    builds_string += "%s%s\n" % (17 * " ", build_item['nvr'])
                build_num += 1
            bodhi_values['builds'] = builds_string
        else:
            bodhi_values['builds'] = "None"
        bodhi_values['request'] = bodhi_update['request']
        bodhi_values['pushed'] = "True" if bodhi_update['date_pushed'] else "False"
        bodhi_values['date_submitted'] = bodhi_update['date_submitted']
        bodhi_values['date_released'] = bodhi_update['date_pushed']
        bodhi_values['submitter'] = bodhi_update['submitter']
        bodhi_values['karma'] = bodhi_update['karma']
        bodhi_values['stable_karma'] = bodhi_update['stable_karma']
        bodhi_values['unstable_karma'] = bodhi_update['unstable_karma']
        bodhi_values['notes'] = bodhi_update['notes']
        bodhi_values['bodhi_url'] = bodhi_update['bodhi_url']
        # decode all strings found in bodhi_values to utf-8
        self.__decode_dict(bodhi_values)
        # map fetched bodhi info on the bodhi_format_string
        # add to the final browser string
        text_browser_string += bodhi_format_string % bodhi_values
        # set final browser string text
        self.ui.textBrowser.setText(text_browser_string)

        ## bugs
        self.ui.treeWidget_bugs.clear()
        if bodhi_update['bugs_by_id']:
            for key in bodhi_update['bugs_by_id']:
                bug = QtGui.QTreeWidgetItem()
                bug.setText(0, str(key))
                bug.setText(1, str(bodhi_update['bugs_by_id'][key]))
                self.ui.treeWidget_bugs.insertTopLevelItem(0, bug)

        ## test cases
        self.ui.treeWidget_test_cases.clear()
        test_cases_list = bodhi_update['test_cases']
        if len(test_cases_list):
            for test_case_item in reversed(test_cases_list):
                tc = QtGui.QTreeWidgetItem()
                tc.setText(0, str(test_case_item))
                self.ui.treeWidget_test_cases.insertTopLevelItem(0, tc)

        ## feedback
        self.ui.treeWidget_feedback.clear()
        comments = bodhi_update['formatted_comments']
        if comments:
            for i in comments:
                comment = CustomTreeWidgetItem()
                # Set vertical alignment to Top
                comment.setTextAlignment(0, QtCore.Qt.AlignTop)
                comment.setTextAlignment(1, QtCore.Qt.AlignTop)
                comment.setTextAlignment(2, QtCore.Qt.AlignTop)
                comment.setTextAlignment(3, QtCore.Qt.AlignTop)
                # Fill it with text
                comment.setText(0, str(i['ord']))
                comment.setText(1, str(i['karma']))
                comment.setText(2, i['author'])
                comment.setText(3, i['text'])
                comment.setToolTip(3, i['text'])
                self.ui.treeWidget_feedback.insertTopLevelItem(0, comment)

    def exit_threads(self):
        if not self.pkg_worker.isRunning():
            self.pkg_worker.exit()

        for i in range(self.__BODHI_WORKERS_COUNT):
            if not self.bodhi_workers[i].isRunning():
                self.bodhi_workers[i].exit()

def main():
    app = QtGui.QApplication(sys.argv)
    win = MainWindow()
    win.show()
    ret = app.exec_()
    win.exit_threads()
    sys.exit(ret)

if __name__ == "__main__":
    main()

# vim: set expandtab ts=4 sts=4 sw=4 :
